import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

public class JavaQuiz extends JFrame implements ActionListener {
    JLabel questionLabel, timerLabel;
    JRadioButton[] options = new JRadioButton[4];
    ButtonGroup group;
    JButton nextButton;
    int currentQuestion = 0, score = 0, timeLeft = 15;
    Timer timer;

    String[][] questions = {
        {"What is the size of int in Java?", "4 bytes", "2 bytes", "8 bytes", "Depends on system"},
        {"Which company developed Java?", "Sun Microsystems", "Microsoft", "Apple", "Google"},
        {"Which keyword is used to inherit a class?", "extends", "super", "this", "import"},
        {"Which method is the entry point for a Java program?", "main", "start", "run", "init"},
        {"Which package contains the Swing classes?", "javax.swing", "java.awt", "java.swing", "java.swingx"},
        {"Which loop is guaranteed to execute at least once?", "do-while", "for", "while", "foreach"},
        {"Java is a ___ typed language.", "statically", "dynamically", "loosely", "manually"}
    };

    int[] correctAnswers = {0, 0, 0, 0, 0, 0, 0}; // correct index for each

    public JavaQuiz() {
        setTitle("Java Quiz");
        setSize(500, 350);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        questionLabel = new JLabel();
        questionLabel.setFont(new Font("Arial", Font.BOLD, 16));
        add(questionLabel, BorderLayout.NORTH);

        JPanel centerPanel = new JPanel(new GridLayout(5, 1));
        group = new ButtonGroup();

        for (int i = 0; i < 4; i++) {
            options[i] = new JRadioButton();
            group.add(options[i]);
            centerPanel.add(options[i]);
        }

        timerLabel = new JLabel("Time Left: 15", JLabel.CENTER);
        timerLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        centerPanel.add(timerLabel);

        add(centerPanel, BorderLayout.CENTER);

        nextButton = new JButton("Next");
        nextButton.addActionListener(this);
        add(nextButton, BorderLayout.SOUTH);

        loadQuestion();
        setVisible(true);
    }

    void loadQuestion() {
        if (currentQuestion < questions.length) {
            questionLabel.setText("Q" + (currentQuestion + 1) + ": " + questions[currentQuestion][0]);
            for (int i = 0; i < 4; i++) {
                options[i].setText(questions[currentQuestion][i + 1]);
                options[i].setSelected(false);
            }
            startTimer();
        } else {
            showResult();
        }
    }

    void startTimer() {
        timeLeft = 15;
        timerLabel.setText("Time Left: " + timeLeft);
        if (timer != null) {
            timer.cancel();
        }
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                timeLeft--;
                timerLabel.setText("Time Left: " + timeLeft);
                if (timeLeft <= 0) {
                    timer.cancel();
                    moveToNextQuestion();  
                }
            }
        }, 1000, 1000);
    }

    void moveToNextQuestion() {
        if (isCorrectAnswer()) score++;
        currentQuestion++;
        loadQuestion();
    }

    void showResult() {
        if (timer != null) timer.cancel();
        JOptionPane.showMessageDialog(this, "Quiz Finished!\nYour Score: " + score + "/" + questions.length);
        saveResultToFile();
        System.exit(0);
    }

    void saveResultToFile() {
        try (FileWriter writer = new FileWriter("quiz_results.txt", true)) {
            writer.write("Score: " + score + "/" + questions.length + " - " + java.time.LocalDateTime.now() + "\n");
        } catch (IOException e) {
            System.err.println("Failed to save result: " + e.getMessage());
        }
    }

    boolean isCorrectAnswer() {
        return options[correctAnswers[currentQuestion]].isSelected();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (timer != null) timer.cancel();
        moveToNextQuestion();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(JavaQuiz::new);
    }
}
